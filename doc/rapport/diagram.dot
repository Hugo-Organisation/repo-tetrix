digraph UML {
  rankdir=TB;
  splines=ortho;
  node [shape=record, fontname=Arial];

  subgraph cluster_App {
    label="Application";
    color=gray;
    App [label="{App| + start(Stage) : void\l + static main(String[]) : void}"];
  }

  subgraph cluster_View {
    label="View";
    color=red;
    MenuViewCtrl [label="{MenuViewCtrl| + initialize(URL, ResourceBundle) : void}"];
    JeuViewCtrl [label="{JeuViewCtrl| + initialize(URL, ResourceBundle) : void}"];
    ParametresMenuViewCtrl [label="{ParametresMenuViewCtrl| + initialize(URL, ResourceBundle) : void}"];
    AboutViewCtrl [label="AboutViewCtrl"];
    MediaManager [label="{MediaManager| - MediaManager()\l + static getInstance()\l + getVolume() : double\l + switchFxSound() : void\l + switchMusicSound() : void\l + getEnableMusic() : boolean\l + getEnableFx() : boolean\l - reloadVolume() : void\l + setVolume(double) : void\l + setMusicPlayer() : void\l + preloadSounds() : void\l + playMediaSound(Media) : void\l + playGroundCollisionSound() : void\l + playDestructionSound() : void\l + playClickSound() : void\l + static attachClickSoundToAllButtons(Parent) : void}"];
  }

  subgraph cluster_Controller {
    label="Controller";
    color=blue;
    GameController [label="{GameController| + GameController(Pane, Pane)\l + startGame(Stage) : void\l + pauseGame() : void\l + quitGame() : void\l + restartGame() : void\l + getCommand() : void\l - addNewBlocks() : void\l - removeDeletedBlocks() : void\l - updateParticles() : void\l - updateSquare() : void\l + updateFrame() : void}"];
    PauseMenuCtrl [label="{PauseMenuCtrl| + setGameController(GameController) : void\l + setResumeButton(Runnable) : void\l + getHeight() : double}"];
    Tetromino [label="{Tetromino| + Tetromino(int)\l - updateSquarePosition() : void\l - updateColor() : void\l + checkFormCollision(SandArea, double, double, int) : boolean\l + createParticleFromForm(SandArea, int) : void\l + rotation() : void\l + getX() : double\l + getY() : double\l + setX(double, double, double) : void\l + setY(double, double, double) : void\l + addToRoot(Pane) : void\l + resetForm() : void\l + resetColor() : void\l + setForm(Form) : void\l + getForm() : Form\l + setColor(Color) : void\l + getColor() : Color}"];
    Square [label="{Square| + Square(double, Color)}"];
  }

  subgraph cluster_Model {
    label="Model";
    color=green;
    Form [label="{Form| - Form(int[][])\l + static createForm(int) : Form\l + static getFormeAleatoire(int) : Form\l - calculateRightXSpace() : int\l - calculateLeftXSpace() : int\l - calculateBottomYSpace() : int\l - calculateTopYSpace() : int\l + rotation() : void\l - calculateDim() : void\l + getMatrice() : int[][]\l + getHeight() : int\l + getWidth() : int\l + getRightXSpace() : int\l + getLeftXSpace() : int\l + getTopYSpace() : int\l + getBottomYSpace() : int}"];
    Block [label="{Block| + Block(int, int, Color)\l + getX() : int\l + getY() : int\l + getColor() : Color\l + setX(int) : void\l + setY(int) : void\l + setXY(int, int) : void}"];
    SandArea [label="{SandArea| + SandArea(int, int, int)\l + getNewBlocks() : ArrayList[Block]\l + getDeletedBlocks() : ArrayList[Block]\l + getMovedBlocks() : ArrayList[Block]\l + checkCollision(int, int) : boolean\l + createBlock(int, int, Color) : void\l + findCluster() : List[List[Block]]\l - findClusterToDelete() : List[List[Block]]\l + removeBlocksToDelete() : void\l + animateBlocks() : void\l - moveBlock(int, int, int, int) : void\l + setBlock(Block) : void}"];
  }

  // Relations (arÃªtes)
  App -> MenuViewCtrl;
  MenuViewCtrl -> MediaManager;
  MenuViewCtrl -> JeuViewCtrl;
  MenuViewCtrl -> ParametresMenuViewCtrl;
  MenuViewCtrl -> AboutViewCtrl;

  ParametresMenuViewCtrl -> MenuViewCtrl;
  ParametresMenuViewCtrl -> MediaManager;

  JeuViewCtrl -> GameController;
  JeuViewCtrl -> PauseMenuCtrl;
  JeuViewCtrl -> MediaManager;

  GameController -> SandArea;
  GameController -> Tetromino;
  GameController -> PauseMenuCtrl;
  GameController -> Square;
  GameController -> MediaManager;

  SandArea -> Block;

  Tetromino -> Square;
  Tetromino -> Form;

  PauseMenuCtrl -> MediaManager;
  PauseMenuCtrl -> MenuViewCtrl;
}
